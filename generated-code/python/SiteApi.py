#!/usr/bin/env python
"""
WordAPI.py
Copyright 2014 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class SiteApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    

    def deviceCameraItems(self, siteId, **kwargs):
        """List camera devices

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: CameraCollection
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceCameraItems" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/camera/items'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'CameraCollection')
        return responseObject
        

        

    def deviceCameraList(self, siteId, **kwargs):
        """Deprecated

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: Array[Camera]
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceCameraList" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/camera/list'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Camera]')
        return responseObject
        

        

    def cameraLiveExtend(self, siteId, cameraId, **kwargs):
        """Add 30 seconds to live streaming

        Args:
            siteId, integer: ID of user's site (required)

            cameraId, integer: ID of site's camera (required)

            

        Returns: 
        """

        allParams = ['siteId', 'cameraId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method cameraLiveExtend" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{cameraId}/camera/live/extend'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('cameraId' in params):
            replacement = str(self.apiClient.toPathValue(params['cameraId']))
            resourcePath = resourcePath.replace('{' + 'cameraId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def cameraLiveStart(self, siteId, cameraId, protocol, **kwargs):
        """Start live streaming from a camera

        Args:
            siteId, integer: ID of user's site (required)

            cameraId, integer: ID of site's camera (required)

            protocol, str: Protocol to use for live (hls or rtmp) (required)

            

        Returns: Stream
        """

        allParams = ['siteId', 'cameraId', 'protocol']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method cameraLiveStart" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{cameraId}/camera/live/start/{protocol}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('cameraId' in params):
            replacement = str(self.apiClient.toPathValue(params['cameraId']))
            resourcePath = resourcePath.replace('{' + 'cameraId' + '}',
                                                replacement)
        if ('protocol' in params):
            replacement = str(self.apiClient.toPathValue(params['protocol']))
            resourcePath = resourcePath.replace('{' + 'protocol' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Stream')
        return responseObject
        

        

    def cameraLiveStop(self, siteId, cameraId, **kwargs):
        """Stop live streaming from a camera

        Args:
            siteId, integer: ID of user's site (required)

            cameraId, integer: ID of site's camera (required)

            

        Returns: bool
        """

        allParams = ['siteId', 'cameraId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method cameraLiveStop" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{cameraId}/camera/live/stop'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('cameraId' in params):
            replacement = str(self.apiClient.toPathValue(params['cameraId']))
            resourcePath = resourcePath.replace('{' + 'cameraId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'bool')
        return responseObject
        

        

    def cameraPreviewTake(self, siteId, cameraId, **kwargs):
        """Get a volatile preview from a camera

        Args:
            siteId, integer: ID of user's site (required)

            cameraId, integer: ID of site's camera (required)

            

        Returns: binary
        """

        allParams = ['siteId', 'cameraId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method cameraPreviewTake" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{cameraId}/camera/preview/take'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('cameraId' in params):
            replacement = str(self.apiClient.toPathValue(params['cameraId']))
            resourcePath = resourcePath.replace('{' + 'cameraId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'binary')
        return responseObject
        

        

    def cameraRecordingStart(self, siteId, cameraId, **kwargs):
        """Start recording from a camera

        Args:
            siteId, integer: ID of user's site (required)

            cameraId, integer: ID of site's camera (required)

            

        Returns: Recording
        """

        allParams = ['siteId', 'cameraId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method cameraRecordingStart" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{cameraId}/camera/recording/start'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('cameraId' in params):
            replacement = str(self.apiClient.toPathValue(params['cameraId']))
            resourcePath = resourcePath.replace('{' + 'cameraId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Recording')
        return responseObject
        

        

    def cameraRecordingStop(self, siteId, cameraId, **kwargs):
        """Stop recording from a camera

        Args:
            siteId, integer: ID of user's site (required)

            cameraId, integer: ID of site's camera (required)

            

        Returns: 
        """

        allParams = ['siteId', 'cameraId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method cameraRecordingStop" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{cameraId}/camera/recording/stop'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('cameraId' in params):
            replacement = str(self.apiClient.toPathValue(params['cameraId']))
            resourcePath = resourcePath.replace('{' + 'cameraId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def cameraSnapshotTake(self, siteId, cameraId, **kwargs):
        """Take a snapshot from a camera and save it in the library

        Args:
            siteId, integer: ID of user's site (required)

            cameraId, integer: ID of site's camera (required)

            

        Returns: Snapshot
        """

        allParams = ['siteId', 'cameraId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method cameraSnapshotTake" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{cameraId}/camera/snapshot/take'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('cameraId' in params):
            replacement = str(self.apiClient.toPathValue(params['cameraId']))
            resourcePath = resourcePath.replace('{' + 'cameraId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Snapshot')
        return responseObject
        

        

    def deviceDataStateItems(self, siteId, **kwargs):
        """List devices with state data

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: DeviceWithStateCollection
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceDataStateItems" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/data/state/items'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'DeviceWithStateCollection')
        return responseObject
        

        

    def deviceDataState(self, siteId, deviceId, **kwargs):
        """Get device state

        Args:
            siteId, integer: ID of user's site (required)

            deviceId, integer: ID of site's slave device (required)

            

        Returns: DeviceWithStateState
        """

        allParams = ['siteId', 'deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceDataState" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{deviceId}/data/state'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'DeviceWithStateState')
        return responseObject
        

        

    def deviceDataTemperatureItems(self, siteId, **kwargs):
        """List all temperature sensor featured devices

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: TemperatureSensorCollection
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceDataTemperatureItems" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/data/temperature/items'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'TemperatureSensorCollection')
        return responseObject
        

        

    def deviceDataTemperatureList(self, siteId, **kwargs):
        """Deprecated

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: Array[TemperatureSensor]
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceDataTemperatureList" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/data/temperature/list'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[TemperatureSensor]')
        return responseObject
        

        

    def deviceDataTemperatureGet(self, siteId, deviceId, **kwargs):
        """Get temperature measures

        Args:
            siteId, integer: ID of user's site (required)

            deviceId, integer: ID of site's slave device (required)

            dateFrom, str: Interval start of temperature measure date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

            dateTo, str: Interval end of temperature measure date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

            

        Returns: TemperatureRecordCollection
        """

        allParams = ['siteId', 'deviceId', 'dateFrom', 'dateTo']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceDataTemperatureGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{deviceId}/data/temperature'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('dateFrom' in params):
            queryParams['dateFrom'] = self.apiClient.toPathValue(params['dateFrom'])
        if ('dateTo' in params):
            queryParams['dateTo'] = self.apiClient.toPathValue(params['dateTo'])
        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'TemperatureRecordCollection')
        return responseObject
        

        

    def deviceDataTemperatureGet_deprecated(self, siteId, deviceId, **kwargs):
        """Deprecated

        Args:
            siteId, integer: ID of user's site (required)

            deviceId, integer: ID of site's slave device (required)

            

        Returns: Array[TemperatureRecord]
        """

        allParams = ['siteId', 'deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceDataTemperatureGet_deprecated" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{deviceId}/data/temperature/get'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[TemperatureRecord]')
        return responseObject
        

        

    def deviceGateItems(self, siteId, **kwargs):
        """List gate devices

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: GateCollection
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceGateItems" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/gate/items'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'GateCollection')
        return responseObject
        

        

    def deviceGateList(self, siteId, **kwargs):
        """Deprecated

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: Array[Gate]
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceGateList" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/gate/list'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Gate]')
        return responseObject
        

        

    def deviceGatePerformOne(self, siteId, deviceId, **kwargs):
        """Perform action #1

        Args:
            siteId, integer: ID of user's site (required)

            deviceId, integer: ID of site's device (required)

            

        Returns: 
        """

        allParams = ['siteId', 'deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceGatePerformOne" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{deviceId}/gate/perform/one'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def deviceGatePerformTwo(self, siteId, deviceId, **kwargs):
        """Perform action #2

        Args:
            siteId, integer: ID of user's site (required)

            deviceId, integer: ID of site's slave device (required)

            

        Returns: 
        """

        allParams = ['siteId', 'deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceGatePerformTwo" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{deviceId}/gate/perform/two'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def deviceHeaterItems(self, siteId, **kwargs):
        """List heater devices

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: HeaterCollection
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceHeaterItems" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/heater/items'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'HeaterCollection')
        return responseObject
        

        

    def deviceHeaterList(self, siteId, **kwargs):
        """Deprecated

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: Array[Heater]
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceHeaterList" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/heater/list'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Heater]')
        return responseObject
        

        

    def deviceHeaterOn(self, siteId, deviceId, **kwargs):
        """Set a heater to 'eco' mode

        Args:
            siteId, integer: ID of user's site (required)

            deviceId, integer: ID of site's device (required)

            

        Returns: 
        """

        allParams = ['siteId', 'deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceHeaterOn" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{deviceId}/heater/eco'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def deviceHeaterOn_SiteApi_0(self, siteId, deviceId, **kwargs):
        """Set a heater to 'frost' mode

        Args:
            siteId, integer: ID of user's site (required)

            deviceId, integer: ID of site's device (required)

            

        Returns: 
        """

        allParams = ['siteId', 'deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceHeaterOn_SiteApi_0" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{deviceId}/heater/frost'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def deviceHeaterOff(self, siteId, deviceId, **kwargs):
        """Set a heater to 'off' mode

        Args:
            siteId, integer: ID of user's site (required)

            deviceId, integer: ID of site's device (required)

            

        Returns: 
        """

        allParams = ['siteId', 'deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceHeaterOff" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{deviceId}/heater/off'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def deviceHeaterOn_SiteApi_1(self, siteId, deviceId, **kwargs):
        """Set a heater to 'on' mode

        Args:
            siteId, integer: ID of user's site (required)

            deviceId, integer: ID of site's device (required)

            

        Returns: 
        """

        allParams = ['siteId', 'deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceHeaterOn_SiteApi_1" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{deviceId}/heater/on'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def deviceShutterItems(self, siteId, **kwargs):
        """List shutter devices

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: ShutterCollection
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceShutterItems" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/shutter/items'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ShutterCollection')
        return responseObject
        

        

    def deviceShutterList(self, siteId, **kwargs):
        """Deprecated

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: Array[Shutter]
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceShutterList" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/shutter/list'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Shutter]')
        return responseObject
        

        

    def deviceShutterClose(self, siteId, deviceId, **kwargs):
        """Close shutter

        Args:
            siteId, integer: ID of user's site (required)

            deviceId, integer: ID of site's device (required)

            

        Returns: 
        """

        allParams = ['siteId', 'deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceShutterClose" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{deviceId}/shutter/close'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def deviceShutterOpen(self, siteId, deviceId, **kwargs):
        """Open shutter

        Args:
            siteId, integer: ID of user's site (required)

            deviceId, integer: ID of site's device (required)

            

        Returns: 
        """

        allParams = ['siteId', 'deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceShutterOpen" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{deviceId}/shutter/open'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def deviceSocketItems(self, siteId, **kwargs):
        """List socket devices

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: SocketCollection
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceSocketItems" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/socket/items'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SocketCollection')
        return responseObject
        

        

    def deviceSocketList(self, siteId, **kwargs):
        """Deprecated

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: Array[Socket]
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceSocketList" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/socket/list'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Socket]')
        return responseObject
        

        

    def deviceSocketOff(self, siteId, deviceId, **kwargs):
        """Turn off a device

        Args:
            siteId, integer: ID of user's site (required)

            deviceId, integer: ID of site's device (required)

            

        Returns: 
        """

        allParams = ['siteId', 'deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceSocketOff" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{deviceId}/socket/off'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def deviceSocketOn(self, siteId, deviceId, **kwargs):
        """Turn on a device

        Args:
            siteId, integer: ID of user's site (required)

            deviceId, integer: ID of site's device (required)

            

        Returns: 
        """

        allParams = ['siteId', 'deviceId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceSocketOn" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/device/{deviceId}/socket/on'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('deviceId' in params):
            replacement = str(self.apiClient.toPathValue(params['deviceId']))
            resourcePath = resourcePath.replace('{' + 'deviceId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def groupElectricItems(self, siteId, **kwargs):
        """List groups of type electric

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: GroupElectricCollection
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method groupElectricItems" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/group/electric/items'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'GroupElectricCollection')
        return responseObject
        

        

    def groupElectricList(self, siteId, **kwargs):
        """Deprecated

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: Array[GroupElectric]
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method groupElectricList" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/group/electric/list'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[GroupElectric]')
        return responseObject
        

        

    def groupElectricOff(self, siteId, groupId, **kwargs):
        """Turn off all electric devices from a group

        Args:
            siteId, integer: ID of user's site (required)

            groupId, integer: ID of site's group (required)

            

        Returns: 
        """

        allParams = ['siteId', 'groupId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method groupElectricOff" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/group/{groupId}/electric/off'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('groupId' in params):
            replacement = str(self.apiClient.toPathValue(params['groupId']))
            resourcePath = resourcePath.replace('{' + 'groupId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def groupElectricOn(self, siteId, groupId, **kwargs):
        """Turn on all electric devices from a group

        Args:
            siteId, integer: ID of user's site (required)

            groupId, integer: ID of site's group (required)

            

        Returns: 
        """

        allParams = ['siteId', 'groupId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method groupElectricOn" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/group/{groupId}/electric/on'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('groupId' in params):
            replacement = str(self.apiClient.toPathValue(params['groupId']))
            resourcePath = resourcePath.replace('{' + 'groupId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def groupShutterItems(self, siteId, **kwargs):
        """List groups of type shutter

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: GroupShutterCollection
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method groupShutterItems" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/group/shutter/items'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'GroupShutterCollection')
        return responseObject
        

        

    def groupShutterList(self, siteId, **kwargs):
        """Deprecated

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: Array[GroupShutter]
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method groupShutterList" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/group/shutter/list'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[GroupShutter]')
        return responseObject
        

        

    def groupShutterClose(self, siteId, groupId, **kwargs):
        """Close all shutters from a group

        Args:
            siteId, integer: ID of user's site (required)

            groupId, integer: ID of site's group (required)

            

        Returns: 
        """

        allParams = ['siteId', 'groupId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method groupShutterClose" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/group/{groupId}/shutter/close'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('groupId' in params):
            replacement = str(self.apiClient.toPathValue(params['groupId']))
            resourcePath = resourcePath.replace('{' + 'groupId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def groupShutterOpen(self, siteId, groupId, **kwargs):
        """Open all shutters from a group

        Args:
            siteId, integer: ID of user's site (required)

            groupId, integer: ID of site's group (required)

            

        Returns: 
        """

        allParams = ['siteId', 'groupId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method groupShutterOpen" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/group/{groupId}/shutter/open'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('groupId' in params):
            replacement = str(self.apiClient.toPathValue(params['groupId']))
            resourcePath = resourcePath.replace('{' + 'groupId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def siteHistory(self, siteId, **kwargs):
        """Get site history

        Args:
            siteId, integer: ID of user's site (required)

            dateFrom, datetime: Interval start of event date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

            dateTo, datetime: Interval end of event date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

            dateOrder, integer: Sort results. 1 for ascending, -1 for descending. (optional)

            type, str: Comma separated type of events to retrieve (alarm, access, account, config, diagnosis, homeAuto, security, scenario) (optional)

            

        Returns: SiteEventCollection
        """

        allParams = ['siteId', 'dateFrom', 'dateTo', 'dateOrder', 'type']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method siteHistory" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/history'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('dateFrom' in params):
            queryParams['dateFrom'] = self.apiClient.toPathValue(params['dateFrom'])
        if ('dateTo' in params):
            queryParams['dateTo'] = self.apiClient.toPathValue(params['dateTo'])
        if ('dateOrder' in params):
            queryParams['dateOrder'] = self.apiClient.toPathValue(params['dateOrder'])
        if ('type' in params):
            queryParams['type'] = self.apiClient.toPathValue(params['type'])
        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SiteEventCollection')
        return responseObject
        

        

    def siteHistoryGet(self, siteId, **kwargs):
        """Deprecated

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: Array[SiteEvent]
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method siteHistoryGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/history/get'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[SiteEvent]')
        return responseObject
        

        

    def libraryImageItems(self, siteId, **kwargs):
        """Get all images taken from a site's cameras

        Args:
            siteId, integer: ID of user's site (required)

            cameraId, integer: ID of user's camera (optional)

            dateFrom, str: Interval start of image's creation date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

            dateTo, str: Interval end of image's creation date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

            dateOrder, integer: Sort results. 1 for ascending, -1 for descending. (optional)

            

        Returns: ImageCollection
        """

        allParams = ['siteId', 'cameraId', 'dateFrom', 'dateTo', 'dateOrder']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method libraryImageItems" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/library/image/items'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('cameraId' in params):
            queryParams['cameraId'] = self.apiClient.toPathValue(params['cameraId'])
        if ('dateFrom' in params):
            queryParams['dateFrom'] = self.apiClient.toPathValue(params['dateFrom'])
        if ('dateTo' in params):
            queryParams['dateTo'] = self.apiClient.toPathValue(params['dateTo'])
        if ('dateOrder' in params):
            queryParams['dateOrder'] = self.apiClient.toPathValue(params['dateOrder'])
        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ImageCollection')
        return responseObject
        

        

    def libraryImageGet(self, siteId, **kwargs):
        """Deprecated

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: Array[Image]
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method libraryImageGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/library/image/list'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Image]')
        return responseObject
        

        

    def libraryVideoItems(self, siteId, **kwargs):
        """Get all videos taken from a site's cameras

        Args:
            siteId, integer: ID of user's site (required)

            cameraId, integer: ID of user's camera (optional)

            dateFrom, str: Interval start of video's creation date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

            dateTo, str: Interval end of video's creation date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

            dateOrder, integer: Sort results. 1 for ascending, -1 for descending. (optional)

            isRecording, bool: Is the video currently recording ? (optional)

            

        Returns: VideoCollection
        """

        allParams = ['siteId', 'cameraId', 'dateFrom', 'dateTo', 'dateOrder', 'isRecording']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method libraryVideoItems" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/library/video/items'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('cameraId' in params):
            queryParams['cameraId'] = self.apiClient.toPathValue(params['cameraId'])
        if ('dateFrom' in params):
            queryParams['dateFrom'] = self.apiClient.toPathValue(params['dateFrom'])
        if ('dateTo' in params):
            queryParams['dateTo'] = self.apiClient.toPathValue(params['dateTo'])
        if ('dateOrder' in params):
            queryParams['dateOrder'] = self.apiClient.toPathValue(params['dateOrder'])
        if ('isRecording' in params):
            queryParams['isRecording'] = self.apiClient.toPathValue(params['isRecording'])
        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'VideoCollection')
        return responseObject
        

        

    def libraryVideoGet(self, siteId, **kwargs):
        """Deprecated

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: Array[Video]
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method libraryVideoGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/library/video/list'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Video]')
        return responseObject
        

        

    def libraryVideoPlay(self, siteId, videoId, **kwargs):
        """Get video informations for HLS playing

        Args:
            siteId, integer: ID of user's site (required)

            videoId, integer: ID of video (required)

            

        Returns: VideoPlayHLS
        """

        allParams = ['siteId', 'videoId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method libraryVideoPlay" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/library/video/{videoId}/play'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('videoId' in params):
            replacement = str(self.apiClient.toPathValue(params['videoId']))
            resourcePath = resourcePath.replace('{' + 'videoId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'VideoPlayHLS')
        return responseObject
        

        

    def scenarioList(self, siteId, **kwargs):
        """List available scenarios

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: ScenarioCollection
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method scenarioList" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/scenario/items'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ScenarioCollection')
        return responseObject
        

        

    def deviceDataTemperatureGet_deprecated_SiteApi_0(self, siteId, **kwargs):
        """Deprecated

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: Array[Scenario]
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deviceDataTemperatureGet_deprecated_SiteApi_0" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/scenario/list'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Scenario]')
        return responseObject
        

        

    def scenarioDisable(self, siteId, scenarioId, **kwargs):
        """Disable a scenario

        Args:
            siteId, integer: ID of user's site (required)

            scenarioId, integer: ID of site's scenario (required)

            

        Returns: 
        """

        allParams = ['siteId', 'scenarioId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method scenarioDisable" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/scenario/{scenarioId}/disable'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('scenarioId' in params):
            replacement = str(self.apiClient.toPathValue(params['scenarioId']))
            resourcePath = resourcePath.replace('{' + 'scenarioId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def scenarioEnable(self, siteId, scenarioId, **kwargs):
        """Enable a scenario

        Args:
            siteId, integer: ID of user's site (required)

            scenarioId, integer: ID of site's scenario (required)

            

        Returns: 
        """

        allParams = ['siteId', 'scenarioId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method scenarioEnable" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/scenario/{scenarioId}/enable'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('scenarioId' in params):
            replacement = str(self.apiClient.toPathValue(params['scenarioId']))
            resourcePath = resourcePath.replace('{' + 'scenarioId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def scenarioPlay(self, siteId, scenarioId, **kwargs):
        """Play a scenario

        Args:
            siteId, integer: ID of user's site (required)

            scenarioId, integer: ID of site's scenario (required)

            

        Returns: 
        """

        allParams = ['siteId', 'scenarioId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method scenarioPlay" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/scenario/{scenarioId}/play'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('scenarioId' in params):
            replacement = str(self.apiClient.toPathValue(params['scenarioId']))
            resourcePath = resourcePath.replace('{' + 'scenarioId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def siteSeclevGet(self, siteId, **kwargs):
        """Get site security level

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: Array[Security]
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method siteSeclevGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/security'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Security]')
        return responseObject
        

        

    def deprecated_siteSeclevGet(self, siteId, **kwargs):
        """Deprecated

        Args:
            siteId, integer: ID of user's site (required)

            

        Returns: Security
        """

        allParams = ['siteId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deprecated_siteSeclevGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/security/get'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Security')
        return responseObject
        

        

    def siteSeclevSet(self, siteId, securityLevel, **kwargs):
        """Set site security level

        Args:
            siteId, integer: ID of user's site (required)

            securityLevel, str: Security level to apply (armed, partial, disarmed) (required)

            

        Returns: 
        """

        allParams = ['siteId', 'securityLevel']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method siteSeclevSet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/site/{siteId}/security/set/{securityLevel}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('siteId' in params):
            replacement = str(self.apiClient.toPathValue(params['siteId']))
            resourcePath = resourcePath.replace('{' + 'siteId' + '}',
                                                replacement)
        if ('securityLevel' in params):
            replacement = str(self.apiClient.toPathValue(params['securityLevel']))
            resourcePath = resourcePath.replace('{' + 'securityLevel' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    




