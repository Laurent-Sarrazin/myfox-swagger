<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class SiteApi {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}

  /**
	 * deviceCameraItems
	 * List camera devices
   * siteId, integer: ID of user's site (required)

   * @return CameraCollection
	 */

   public function deviceCameraItems($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/camera/items";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'CameraCollection');
  		return $responseObject;

      }
  /**
	 * deviceCameraList
	 * Deprecated
   * siteId, integer: ID of user's site (required)

   * @return Array[Camera]
	 */

   public function deviceCameraList($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/camera/list";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[Camera]');
  		return $responseObject;

      }
  /**
	 * cameraLiveExtend
	 * Add 30 seconds to live streaming
   * siteId, integer: ID of user's site (required)

   * cameraId, integer: ID of site's camera (required)

   * @return 
	 */

   public function cameraLiveExtend($siteId, $cameraId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{cameraId}/camera/live/extend";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($cameraId != null) {
  			$resourcePath = str_replace("{" . "cameraId" . "}",
  			                            $this->apiClient->toPathValue($cameraId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * cameraLiveStart
	 * Start live streaming from a camera
   * siteId, integer: ID of user's site (required)

   * cameraId, integer: ID of site's camera (required)

   * protocol, string: Protocol to use for live (hls or rtmp) (required)

   * @return Stream
	 */

   public function cameraLiveStart($siteId, $cameraId, $protocol) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{cameraId}/camera/live/start/{protocol}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($cameraId != null) {
  			$resourcePath = str_replace("{" . "cameraId" . "}",
  			                            $this->apiClient->toPathValue($cameraId), $resourcePath);
  		}
  		if($protocol != null) {
  			$resourcePath = str_replace("{" . "protocol" . "}",
  			                            $this->apiClient->toPathValue($protocol), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Stream');
  		return $responseObject;

      }
  /**
	 * cameraLiveStop
	 * Stop live streaming from a camera
   * siteId, integer: ID of user's site (required)

   * cameraId, integer: ID of site's camera (required)

   * @return bool
	 */

   public function cameraLiveStop($siteId, $cameraId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{cameraId}/camera/live/stop";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($cameraId != null) {
  			$resourcePath = str_replace("{" . "cameraId" . "}",
  			                            $this->apiClient->toPathValue($cameraId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'bool');
  		return $responseObject;

      }
  /**
	 * cameraPreviewTake
	 * Get a volatile preview from a camera
   * siteId, integer: ID of user's site (required)

   * cameraId, integer: ID of site's camera (required)

   * @return binary
	 */

   public function cameraPreviewTake($siteId, $cameraId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{cameraId}/camera/preview/take";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'image/*';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($cameraId != null) {
  			$resourcePath = str_replace("{" . "cameraId" . "}",
  			                            $this->apiClient->toPathValue($cameraId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'binary');
  		return $responseObject;

      }
  /**
	 * cameraRecordingStart
	 * Start recording from a camera
   * siteId, integer: ID of user's site (required)

   * cameraId, integer: ID of site's camera (required)

   * @return Recording
	 */

   public function cameraRecordingStart($siteId, $cameraId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{cameraId}/camera/recording/start";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($cameraId != null) {
  			$resourcePath = str_replace("{" . "cameraId" . "}",
  			                            $this->apiClient->toPathValue($cameraId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Recording');
  		return $responseObject;

      }
  /**
	 * cameraRecordingStop
	 * Stop recording from a camera
   * siteId, integer: ID of user's site (required)

   * cameraId, integer: ID of site's camera (required)

   * @return 
	 */

   public function cameraRecordingStop($siteId, $cameraId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{cameraId}/camera/recording/stop";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($cameraId != null) {
  			$resourcePath = str_replace("{" . "cameraId" . "}",
  			                            $this->apiClient->toPathValue($cameraId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * cameraSnapshotTake
	 * Take a snapshot from a camera and save it in the library
   * siteId, integer: ID of user's site (required)

   * cameraId, integer: ID of site's camera (required)

   * @return Snapshot
	 */

   public function cameraSnapshotTake($siteId, $cameraId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{cameraId}/camera/snapshot/take";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($cameraId != null) {
  			$resourcePath = str_replace("{" . "cameraId" . "}",
  			                            $this->apiClient->toPathValue($cameraId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Snapshot');
  		return $responseObject;

      }
  /**
	 * deviceDataStateItems
	 * List devices with state data
   * siteId, integer: ID of user's site (required)

   * @return DeviceWithStateCollection
	 */

   public function deviceDataStateItems($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/data/state/items";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'DeviceWithStateCollection');
  		return $responseObject;

      }
  /**
	 * deviceDataState
	 * Get device state
   * siteId, integer: ID of user's site (required)

   * deviceId, integer: ID of site's slave device (required)

   * @return DeviceWithStateState
	 */

   public function deviceDataState($siteId, $deviceId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{deviceId}/data/state";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($deviceId != null) {
  			$resourcePath = str_replace("{" . "deviceId" . "}",
  			                            $this->apiClient->toPathValue($deviceId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'DeviceWithStateState');
  		return $responseObject;

      }
  /**
	 * deviceDataTemperatureItems
	 * List all temperature sensor featured devices
   * siteId, integer: ID of user's site (required)

   * @return TemperatureSensorCollection
	 */

   public function deviceDataTemperatureItems($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/data/temperature/items";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'TemperatureSensorCollection');
  		return $responseObject;

      }
  /**
	 * deviceDataTemperatureList
	 * Deprecated
   * siteId, integer: ID of user's site (required)

   * @return Array[TemperatureSensor]
	 */

   public function deviceDataTemperatureList($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/data/temperature/list";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[TemperatureSensor]');
  		return $responseObject;

      }
  /**
	 * deviceDataTemperatureGet
	 * Get temperature measures
   * siteId, integer: ID of user's site (required)

   * deviceId, integer: ID of site's slave device (required)

   * dateFrom, string: Interval start of temperature measure date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

   * dateTo, string: Interval end of temperature measure date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

   * @return TemperatureRecordCollection
	 */

   public function deviceDataTemperatureGet($siteId, $deviceId, $dateFrom=null, $dateTo=null) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{deviceId}/data/temperature";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($dateFrom != null) {
  		  $queryParams['dateFrom'] = $this->apiClient->toQueryValue($dateFrom);
  		}
  		if($dateTo != null) {
  		  $queryParams['dateTo'] = $this->apiClient->toQueryValue($dateTo);
  		}
  		if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($deviceId != null) {
  			$resourcePath = str_replace("{" . "deviceId" . "}",
  			                            $this->apiClient->toPathValue($deviceId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'TemperatureRecordCollection');
  		return $responseObject;

      }
  /**
	 * deviceDataTemperatureGet_deprecated
	 * Deprecated
   * siteId, integer: ID of user's site (required)

   * deviceId, integer: ID of site's slave device (required)

   * @return Array[TemperatureRecord]
	 */

   public function deviceDataTemperatureGet_deprecated($siteId, $deviceId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{deviceId}/data/temperature/get";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($deviceId != null) {
  			$resourcePath = str_replace("{" . "deviceId" . "}",
  			                            $this->apiClient->toPathValue($deviceId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[TemperatureRecord]');
  		return $responseObject;

      }
  /**
	 * deviceGateItems
	 * List gate devices
   * siteId, integer: ID of user's site (required)

   * @return GateCollection
	 */

   public function deviceGateItems($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/gate/items";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'GateCollection');
  		return $responseObject;

      }
  /**
	 * deviceGateList
	 * Deprecated
   * siteId, integer: ID of user's site (required)

   * @return Array[Gate]
	 */

   public function deviceGateList($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/gate/list";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[Gate]');
  		return $responseObject;

      }
  /**
	 * deviceGatePerformOne
	 * Perform action #1
   * siteId, integer: ID of user's site (required)

   * deviceId, integer: ID of site's device (required)

   * @return 
	 */

   public function deviceGatePerformOne($siteId, $deviceId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{deviceId}/gate/perform/one";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($deviceId != null) {
  			$resourcePath = str_replace("{" . "deviceId" . "}",
  			                            $this->apiClient->toPathValue($deviceId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * deviceGatePerformTwo
	 * Perform action #2
   * siteId, integer: ID of user's site (required)

   * deviceId, integer: ID of site's slave device (required)

   * @return 
	 */

   public function deviceGatePerformTwo($siteId, $deviceId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{deviceId}/gate/perform/two";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($deviceId != null) {
  			$resourcePath = str_replace("{" . "deviceId" . "}",
  			                            $this->apiClient->toPathValue($deviceId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * deviceHeaterItems
	 * List heater devices
   * siteId, integer: ID of user's site (required)

   * @return HeaterCollection
	 */

   public function deviceHeaterItems($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/heater/items";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'HeaterCollection');
  		return $responseObject;

      }
  /**
	 * deviceHeaterList
	 * Deprecated
   * siteId, integer: ID of user's site (required)

   * @return Array[Heater]
	 */

   public function deviceHeaterList($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/heater/list";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[Heater]');
  		return $responseObject;

      }
  /**
	 * deviceHeaterOn
	 * Set a heater to 'eco' mode
   * siteId, integer: ID of user's site (required)

   * deviceId, integer: ID of site's device (required)

   * @return 
	 */

   public function deviceHeaterOn($siteId, $deviceId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{deviceId}/heater/eco";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($deviceId != null) {
  			$resourcePath = str_replace("{" . "deviceId" . "}",
  			                            $this->apiClient->toPathValue($deviceId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * deviceHeaterOn_SiteApi_0
	 * Set a heater to 'frost' mode
   * siteId, integer: ID of user's site (required)

   * deviceId, integer: ID of site's device (required)

   * @return 
	 */

   public function deviceHeaterOn_SiteApi_0($siteId, $deviceId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{deviceId}/heater/frost";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($deviceId != null) {
  			$resourcePath = str_replace("{" . "deviceId" . "}",
  			                            $this->apiClient->toPathValue($deviceId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * deviceHeaterOff
	 * Set a heater to 'off' mode
   * siteId, integer: ID of user's site (required)

   * deviceId, integer: ID of site's device (required)

   * @return 
	 */

   public function deviceHeaterOff($siteId, $deviceId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{deviceId}/heater/off";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($deviceId != null) {
  			$resourcePath = str_replace("{" . "deviceId" . "}",
  			                            $this->apiClient->toPathValue($deviceId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * deviceHeaterOn_SiteApi_1
	 * Set a heater to 'on' mode
   * siteId, integer: ID of user's site (required)

   * deviceId, integer: ID of site's device (required)

   * @return 
	 */

   public function deviceHeaterOn_SiteApi_1($siteId, $deviceId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{deviceId}/heater/on";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($deviceId != null) {
  			$resourcePath = str_replace("{" . "deviceId" . "}",
  			                            $this->apiClient->toPathValue($deviceId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * deviceShutterItems
	 * List shutter devices
   * siteId, integer: ID of user's site (required)

   * @return ShutterCollection
	 */

   public function deviceShutterItems($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/shutter/items";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ShutterCollection');
  		return $responseObject;

      }
  /**
	 * deviceShutterList
	 * Deprecated
   * siteId, integer: ID of user's site (required)

   * @return Array[Shutter]
	 */

   public function deviceShutterList($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/shutter/list";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[Shutter]');
  		return $responseObject;

      }
  /**
	 * deviceShutterClose
	 * Close shutter
   * siteId, integer: ID of user's site (required)

   * deviceId, integer: ID of site's device (required)

   * @return 
	 */

   public function deviceShutterClose($siteId, $deviceId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{deviceId}/shutter/close";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($deviceId != null) {
  			$resourcePath = str_replace("{" . "deviceId" . "}",
  			                            $this->apiClient->toPathValue($deviceId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * deviceShutterOpen
	 * Open shutter
   * siteId, integer: ID of user's site (required)

   * deviceId, integer: ID of site's device (required)

   * @return 
	 */

   public function deviceShutterOpen($siteId, $deviceId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{deviceId}/shutter/open";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($deviceId != null) {
  			$resourcePath = str_replace("{" . "deviceId" . "}",
  			                            $this->apiClient->toPathValue($deviceId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * deviceSocketItems
	 * List socket devices
   * siteId, integer: ID of user's site (required)

   * @return SocketCollection
	 */

   public function deviceSocketItems($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/socket/items";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'SocketCollection');
  		return $responseObject;

      }
  /**
	 * deviceSocketList
	 * Deprecated
   * siteId, integer: ID of user's site (required)

   * @return Array[Socket]
	 */

   public function deviceSocketList($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/socket/list";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[Socket]');
  		return $responseObject;

      }
  /**
	 * deviceSocketOff
	 * Turn off a device
   * siteId, integer: ID of user's site (required)

   * deviceId, integer: ID of site's device (required)

   * @return 
	 */

   public function deviceSocketOff($siteId, $deviceId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{deviceId}/socket/off";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($deviceId != null) {
  			$resourcePath = str_replace("{" . "deviceId" . "}",
  			                            $this->apiClient->toPathValue($deviceId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * deviceSocketOn
	 * Turn on a device
   * siteId, integer: ID of user's site (required)

   * deviceId, integer: ID of site's device (required)

   * @return 
	 */

   public function deviceSocketOn($siteId, $deviceId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/device/{deviceId}/socket/on";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($deviceId != null) {
  			$resourcePath = str_replace("{" . "deviceId" . "}",
  			                            $this->apiClient->toPathValue($deviceId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * groupElectricItems
	 * List groups of type electric
   * siteId, integer: ID of user's site (required)

   * @return GroupElectricCollection
	 */

   public function groupElectricItems($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/group/electric/items";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'GroupElectricCollection');
  		return $responseObject;

      }
  /**
	 * groupElectricList
	 * Deprecated
   * siteId, integer: ID of user's site (required)

   * @return Array[GroupElectric]
	 */

   public function groupElectricList($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/group/electric/list";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[GroupElectric]');
  		return $responseObject;

      }
  /**
	 * groupElectricOff
	 * Turn off all electric devices from a group
   * siteId, integer: ID of user's site (required)

   * groupId, integer: ID of site's group (required)

   * @return 
	 */

   public function groupElectricOff($siteId, $groupId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/group/{groupId}/electric/off";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($groupId != null) {
  			$resourcePath = str_replace("{" . "groupId" . "}",
  			                            $this->apiClient->toPathValue($groupId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * groupElectricOn
	 * Turn on all electric devices from a group
   * siteId, integer: ID of user's site (required)

   * groupId, integer: ID of site's group (required)

   * @return 
	 */

   public function groupElectricOn($siteId, $groupId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/group/{groupId}/electric/on";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($groupId != null) {
  			$resourcePath = str_replace("{" . "groupId" . "}",
  			                            $this->apiClient->toPathValue($groupId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * groupShutterItems
	 * List groups of type shutter
   * siteId, integer: ID of user's site (required)

   * @return GroupShutterCollection
	 */

   public function groupShutterItems($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/group/shutter/items";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'GroupShutterCollection');
  		return $responseObject;

      }
  /**
	 * groupShutterList
	 * Deprecated
   * siteId, integer: ID of user's site (required)

   * @return Array[GroupShutter]
	 */

   public function groupShutterList($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/group/shutter/list";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[GroupShutter]');
  		return $responseObject;

      }
  /**
	 * groupShutterClose
	 * Close all shutters from a group
   * siteId, integer: ID of user's site (required)

   * groupId, integer: ID of site's group (required)

   * @return 
	 */

   public function groupShutterClose($siteId, $groupId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/group/{groupId}/shutter/close";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($groupId != null) {
  			$resourcePath = str_replace("{" . "groupId" . "}",
  			                            $this->apiClient->toPathValue($groupId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * groupShutterOpen
	 * Open all shutters from a group
   * siteId, integer: ID of user's site (required)

   * groupId, integer: ID of site's group (required)

   * @return 
	 */

   public function groupShutterOpen($siteId, $groupId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/group/{groupId}/shutter/open";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($groupId != null) {
  			$resourcePath = str_replace("{" . "groupId" . "}",
  			                            $this->apiClient->toPathValue($groupId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * siteHistory
	 * Get site history
   * siteId, integer: ID of user's site (required)

   * dateFrom, DateTime: Interval start of event date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

   * dateTo, DateTime: Interval end of event date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

   * dateOrder, integer: Sort results. 1 for ascending, -1 for descending. (optional)

   * type, string: Comma separated type of events to retrieve (alarm, access, account, config, diagnosis, homeAuto, security, scenario) (optional)

   * @return SiteEventCollection
	 */

   public function siteHistory($siteId, $dateFrom=null, $dateTo=null, $dateOrder=null, $type=null) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/history";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($dateFrom != null) {
  		  $queryParams['dateFrom'] = $this->apiClient->toQueryValue($dateFrom);
  		}
  		if($dateTo != null) {
  		  $queryParams['dateTo'] = $this->apiClient->toQueryValue($dateTo);
  		}
  		if($dateOrder != null) {
  		  $queryParams['dateOrder'] = $this->apiClient->toQueryValue($dateOrder);
  		}
  		if($type != null) {
  		  $queryParams['type'] = $this->apiClient->toQueryValue($type);
  		}
  		if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'SiteEventCollection');
  		return $responseObject;

      }
  /**
	 * siteHistoryGet
	 * Deprecated
   * siteId, integer: ID of user's site (required)

   * @return Array[SiteEvent]
	 */

   public function siteHistoryGet($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/history/get";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[SiteEvent]');
  		return $responseObject;

      }
  /**
	 * libraryImageItems
	 * Get all images taken from a site's cameras
   * siteId, integer: ID of user's site (required)

   * cameraId, integer: ID of user's camera (optional)

   * dateFrom, string: Interval start of image's creation date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

   * dateTo, string: Interval end of image's creation date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

   * dateOrder, integer: Sort results. 1 for ascending, -1 for descending. (optional)

   * @return ImageCollection
	 */

   public function libraryImageItems($siteId, $cameraId=null, $dateFrom=null, $dateTo=null, $dateOrder=null) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/library/image/items";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($cameraId != null) {
  		  $queryParams['cameraId'] = $this->apiClient->toQueryValue($cameraId);
  		}
  		if($dateFrom != null) {
  		  $queryParams['dateFrom'] = $this->apiClient->toQueryValue($dateFrom);
  		}
  		if($dateTo != null) {
  		  $queryParams['dateTo'] = $this->apiClient->toQueryValue($dateTo);
  		}
  		if($dateOrder != null) {
  		  $queryParams['dateOrder'] = $this->apiClient->toQueryValue($dateOrder);
  		}
  		if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ImageCollection');
  		return $responseObject;

      }
  /**
	 * libraryImageGet
	 * Deprecated
   * siteId, integer: ID of user's site (required)

   * @return Array[Image]
	 */

   public function libraryImageGet($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/library/image/list";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[Image]');
  		return $responseObject;

      }
  /**
	 * libraryVideoItems
	 * Get all videos taken from a site's cameras
   * siteId, integer: ID of user's site (required)

   * cameraId, integer: ID of user's camera (optional)

   * dateFrom, string: Interval start of video's creation date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

   * dateTo, string: Interval end of video's creation date. Format: YYYY-MM-DDThh:mm:ssZ (optional)

   * dateOrder, integer: Sort results. 1 for ascending, -1 for descending. (optional)

   * isRecording, bool: Is the video currently recording ? (optional)

   * @return VideoCollection
	 */

   public function libraryVideoItems($siteId, $cameraId=null, $dateFrom=null, $dateTo=null, $dateOrder=null, $isRecording=null) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/library/video/items";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($cameraId != null) {
  		  $queryParams['cameraId'] = $this->apiClient->toQueryValue($cameraId);
  		}
  		if($dateFrom != null) {
  		  $queryParams['dateFrom'] = $this->apiClient->toQueryValue($dateFrom);
  		}
  		if($dateTo != null) {
  		  $queryParams['dateTo'] = $this->apiClient->toQueryValue($dateTo);
  		}
  		if($dateOrder != null) {
  		  $queryParams['dateOrder'] = $this->apiClient->toQueryValue($dateOrder);
  		}
  		if($isRecording != null) {
  		  $queryParams['isRecording'] = $this->apiClient->toQueryValue($isRecording);
  		}
  		if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'VideoCollection');
  		return $responseObject;

      }
  /**
	 * libraryVideoGet
	 * Deprecated
   * siteId, integer: ID of user's site (required)

   * @return Array[Video]
	 */

   public function libraryVideoGet($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/library/video/list";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[Video]');
  		return $responseObject;

      }
  /**
	 * libraryVideoPlay
	 * Get video informations for HLS playing
   * siteId, integer: ID of user's site (required)

   * videoId, integer: ID of video (required)

   * @return VideoPlayHLS
	 */

   public function libraryVideoPlay($siteId, $videoId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/library/video/{videoId}/play";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($videoId != null) {
  			$resourcePath = str_replace("{" . "videoId" . "}",
  			                            $this->apiClient->toPathValue($videoId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'VideoPlayHLS');
  		return $responseObject;

      }
  /**
	 * scenarioList
	 * List available scenarios
   * siteId, integer: ID of user's site (required)

   * @return ScenarioCollection
	 */

   public function scenarioList($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/scenario/items";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ScenarioCollection');
  		return $responseObject;

      }
  /**
	 * deviceDataTemperatureGet_deprecated_SiteApi_0
	 * Deprecated
   * siteId, integer: ID of user's site (required)

   * @return Array[Scenario]
	 */

   public function deviceDataTemperatureGet_deprecated_SiteApi_0($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/scenario/list";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[Scenario]');
  		return $responseObject;

      }
  /**
	 * scenarioDisable
	 * Disable a scenario
   * siteId, integer: ID of user's site (required)

   * scenarioId, integer: ID of site's scenario (required)

   * @return 
	 */

   public function scenarioDisable($siteId, $scenarioId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/scenario/{scenarioId}/disable";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($scenarioId != null) {
  			$resourcePath = str_replace("{" . "scenarioId" . "}",
  			                            $this->apiClient->toPathValue($scenarioId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * scenarioEnable
	 * Enable a scenario
   * siteId, integer: ID of user's site (required)

   * scenarioId, integer: ID of site's scenario (required)

   * @return 
	 */

   public function scenarioEnable($siteId, $scenarioId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/scenario/{scenarioId}/enable";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($scenarioId != null) {
  			$resourcePath = str_replace("{" . "scenarioId" . "}",
  			                            $this->apiClient->toPathValue($scenarioId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * scenarioPlay
	 * Play a scenario
   * siteId, integer: ID of user's site (required)

   * scenarioId, integer: ID of site's scenario (required)

   * @return 
	 */

   public function scenarioPlay($siteId, $scenarioId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/scenario/{scenarioId}/play";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($scenarioId != null) {
  			$resourcePath = str_replace("{" . "scenarioId" . "}",
  			                            $this->apiClient->toPathValue($scenarioId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * siteSeclevGet
	 * Get site security level
   * siteId, integer: ID of user's site (required)

   * @return Array[Security]
	 */

   public function siteSeclevGet($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/security";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[Security]');
  		return $responseObject;

      }
  /**
	 * deprecated_siteSeclevGet
	 * Deprecated
   * siteId, integer: ID of user's site (required)

   * @return Security
	 */

   public function deprecated_siteSeclevGet($siteId) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/security/get";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Security');
  		return $responseObject;

      }
  /**
	 * siteSeclevSet
	 * Set site security level
   * siteId, integer: ID of user's site (required)

   * securityLevel, string: Security level to apply (armed, partial, disarmed) (required)

   * @return 
	 */

   public function siteSeclevSet($siteId, $securityLevel) {

  		//parse inputs
  		$resourcePath = "/site/{siteId}/security/set/{securityLevel}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($siteId != null) {
  			$resourcePath = str_replace("{" . "siteId" . "}",
  			                            $this->apiClient->toPathValue($siteId), $resourcePath);
  		}
  		if($securityLevel != null) {
  			$resourcePath = str_replace("{" . "securityLevel" . "}",
  			                            $this->apiClient->toPathValue($securityLevel), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  

}

